{"version":3,"sources":["webpack://yacd/./src/components/Config.module.css?b1fa","webpack://yacd/./src/components/Selection.module.css?bfce","webpack://yacd/./src/components/Selection.tsx","webpack://yacd/./src/components/TrafficChartSample.tsx","webpack://yacd/./src/components/Config.tsx"],"names":["Selection","OptionComponent","optionPropsList","selectedIndex","onChange","className","s","map","props","idx","cx","doSelect","ev","preventDefault","tabIndex","role","onKeyDown","onClick","extraChartOptions","legend","display","scales","xAxes","yAxes","data1","data2","labels","TrafficChart","id","Chart","chartJSResource","data","useMemo","datasets","commonDataSetProps","chartStyles","up","down","eleId","useLineChart","style","width","padding","useEffect","React","useState","useCallback","useRef","propsList","optionsRule","label","value","optionsLogLevel","portFields","key","Config","connect","selectedChartStyleIndex","getSelectedChartStyleIndex","latencyTestUrl","getLatencyTestUrl","apiConfig","getClashAPIConfig","dispatch","configs","configState","setConfigStateInternal","refConfigs","current","openAPIConfigModal","openModal","setConfigState","name","val","handleSwitchOnChange","checked","updateConfigs","handleInputOnChange","e","target","num","parseInt","useStoreActions","selectChartStyleIndex","updateAppConfig","handleInputOnBlur","Error","mode","m","toUpperCase","slice","ContentHeader","title","s0","f","undefined","Input","onBlur","ToggleSwitch","options","TrafficChartSample","maxWidth","type","Button","getConfigs","fetchConfigs","propTypes","PropTypes"],"mappings":"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","file":"config.582836fd75595e569572.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_2drigWG08z\",\"section\":\"_3qy5-MPwaw\",\"sep\":\"_1sbDIR8sCY\",\"label\":\"_1Hvw0QbyvH\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_3uy3l7xDdI\",\"item\":\"_2hwDLKbh5f\",\"itemActive\":\"_1OeAkW2Cff\"};","import cx from 'clsx';\nimport React from 'react';\n\nimport s from './Selection.module.css';\n\ntype SelectionProps = {\n    OptionComponent?: (...args: any[]) => any;\n    optionPropsList?: any[];\n    selectedIndex?: number;\n    onChange?: (...args: any[]) => any;\n};\n\nexport default function Selection({ OptionComponent, optionPropsList, selectedIndex, onChange, }: SelectionProps) {\n  return (\n    <div className={s.root}>\n      {optionPropsList.map((props, idx) => {\n        const className = cx(s.item, { [s.itemActive]: idx === selectedIndex });\n        const doSelect = (ev) => {\n          ev.preventDefault();\n          if (idx !== selectedIndex) onChange(idx);\n        };\n        return (\n          <div\n            key={idx}\n            className={className}\n            tabIndex={0}\n            role=\"menuitem\"\n            onKeyDown={doSelect}\n            onClick={doSelect}\n          >\n            <OptionComponent {...props} />\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\n// for test\n// @ts-expect-error ts-migrate(7030) FIXME: Not all code paths return a value.\nexport function Option({ title }) {\n  // eslint-disable-next-line no-undef\n  if (__DEV__) {\n    return (\n      <div\n        style={{\n          width: 100,\n          height: 60,\n          backgroundColor: '#eee',\n        }}\n      >\n        {title}\n      </div>\n    );\n  }\n}\n","import React, { useMemo } from 'react';\n\nimport useLineChart from '../hooks/useLineChart';\nimport {\n  chartJSResource,\n  chartStyles,\n  commonDataSetProps,\n} from '../misc/chart';\n\nconst extraChartOptions = {\n  legend: {\n    display: false,\n  },\n  scales: {\n    xAxes: [{ display: false }],\n    yAxes: [{ display: false }],\n  },\n};\n\nconst data1 = [23e3, 35e3, 46e3, 33e3, 90e3, 68e3, 23e3, 45e3];\nconst data2 = [184e3, 183e3, 196e3, 182e3, 190e3, 186e3, 182e3, 189e3];\nconst labels = data1;\n\nexport default function TrafficChart({ id }) {\n  const Chart = chartJSResource.read();\n\n  const data = useMemo(\n    () => ({\n      labels,\n      datasets: [\n        {\n          ...commonDataSetProps,\n          ...chartStyles[id].up,\n          data: data1,\n        },\n        {\n          ...commonDataSetProps,\n          ...chartStyles[id].down,\n          data: data2,\n        },\n      ],\n    }),\n    [id]\n  );\n\n  const eleId = 'chart-' + id;\n  useLineChart(Chart, eleId, data, null, extraChartOptions);\n\n  return (\n    <div\n      style={{\n        width: 130,\n        padding: 5,\n      }}\n    >\n      <canvas id={eleId} />\n    </div>\n  );\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {\n  getClashAPIConfig,\n  getLatencyTestUrl,\n  getSelectedChartStyleIndex,\n} from '../store/app';\nimport { fetchConfigs, getConfigs, updateConfigs } from '../store/configs';\nimport { openModal } from '../store/modals';\nimport Button from './Button';\nimport s0 from './Config.module.css';\nimport ContentHeader from './ContentHeader';\nimport Input, { SelfControlledInput } from './Input';\nimport Selection from './Selection';\nimport { connect, useStoreActions } from './StateProvider';\nimport Switch from './SwitchThemed';\nimport ToggleSwitch from './ToggleSwitch';\nimport TrafficChartSample from './TrafficChartSample';\n\nconst { useEffect, useState, useCallback, useRef, useMemo } = React;\n\nconst propsList = [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }];\n\nconst optionsRule = [\n  {\n    label: 'Global',\n    value: 'Global',\n  },\n  {\n    label: 'Rule',\n    value: 'Rule',\n  },\n  {\n    label: 'Direct',\n    value: 'Direct',\n  },\n];\n\nconst optionsLogLevel = [\n  {\n    label: 'info',\n    value: 'info',\n  },\n  {\n    label: 'warning',\n    value: 'warning',\n  },\n  {\n    label: 'error',\n    value: 'error',\n  },\n  {\n    label: 'debug',\n    value: 'debug',\n  },\n  {\n    label: 'silent',\n    value: 'silent',\n  },\n];\n\nconst portFields = [\n  { key: 'port', label: 'HTTP Proxy Port' },\n  { key: 'socks-port', label: 'SOCKS5 Proxy Port' },\n  { key: 'mixed-port', label: 'Mixed Port' },\n  { key: 'redir-port', label: 'Redir Port' },\n];\n\nconst mapState = (s) => ({\n  configs: getConfigs(s),\n  apiConfig: getClashAPIConfig(s),\n});\n\nconst mapState2 = (s) => ({\n  selectedChartStyleIndex: getSelectedChartStyleIndex(s),\n  latencyTestUrl: getLatencyTestUrl(s),\n  apiConfig: getClashAPIConfig(s),\n});\n\nconst Config = connect(mapState2)(ConfigImpl);\nexport default connect(mapState)(ConfigContainer);\n\nfunction ConfigContainer({ dispatch, configs, apiConfig }) {\n  useEffect(() => {\n    dispatch(fetchConfigs(apiConfig));\n  }, [dispatch, apiConfig]);\n  return <Config configs={configs} />;\n}\n\nfunction ConfigImpl({\n  dispatch,\n  configs,\n  selectedChartStyleIndex,\n  latencyTestUrl,\n  apiConfig,\n}) {\n  const [configState, setConfigStateInternal] = useState(configs);\n  const refConfigs = useRef(configs);\n  useEffect(() => {\n    if (refConfigs.current !== configs) {\n      setConfigStateInternal(configs);\n    }\n    refConfigs.current = configs;\n  }, [configs]);\n\n  const openAPIConfigModal = useCallback(() => {\n    dispatch(openModal('apiConfig'));\n  }, [dispatch]);\n\n  const setConfigState = useCallback(\n    (name, val) => {\n      setConfigStateInternal({\n        ...configState,\n        [name]: val,\n      });\n    },\n    [configState]\n  );\n\n  const handleSwitchOnChange = useCallback(\n    (checked: boolean) => {\n      const name = 'allow-lan';\n      const value = checked;\n      setConfigState(name, value);\n      dispatch(updateConfigs(apiConfig, { 'allow-lan': value }));\n    },\n    [apiConfig, dispatch, setConfigState]\n  );\n\n  const handleInputOnChange = useCallback(\n    (e) => {\n      const target = e.target;\n      const { name } = target;\n      const { value } = target;\n      switch (target.name) {\n        case 'mode':\n        case 'log-level':\n          setConfigState(name, value);\n          dispatch(updateConfigs(apiConfig, { [name]: value }));\n          break;\n        case 'redir-port':\n        case 'socks-port':\n        case 'mixed-port':\n        case 'port':\n          if (target.value !== '') {\n            const num = parseInt(target.value, 10);\n            if (num < 0 || num > 65535) return;\n          }\n          setConfigState(name, value);\n          break;\n        default:\n          return;\n      }\n    },\n    [apiConfig, dispatch, setConfigState]\n  );\n\n  const { selectChartStyleIndex, updateAppConfig } = useStoreActions();\n\n  const handleInputOnBlur = useCallback(\n    (e) => {\n      const target = e.target;\n      const { name, value } = target;\n      switch (name) {\n        case 'port':\n        case 'socks-port':\n        case 'mixed-port':\n        case 'redir-port': {\n          const num = parseInt(value, 10);\n          if (num < 0 || num > 65535) return;\n          dispatch(updateConfigs(apiConfig, { [name]: num }));\n          break;\n        }\n        case 'latencyTestUrl': {\n          updateAppConfig(name, value);\n          break;\n        }\n        default:\n          throw new Error(`unknown input name ${name}`);\n      }\n    },\n    [apiConfig, dispatch, updateAppConfig]\n  );\n\n  const mode = useMemo(() => {\n    const m = configState.mode;\n    return typeof m === 'string' && m[0].toUpperCase() + m.slice(1);\n  }, [configState.mode]);\n\n  return (\n    <div>\n      <ContentHeader title=\"Config\" />\n      <div className={s0.root}>\n        {portFields.map((f) =>\n          configState[f.key] !== undefined ? (\n            <div key={f.key}>\n              <div className={s0.label}>{f.label}</div>\n              <Input\n                name={f.key}\n                value={configState[f.key]}\n                onChange={handleInputOnChange}\n                // @ts-expect-error ts-migrate(2322) FIXME: Type '{ name: string; value: any; onChange: (e: an... Remove this comment to see the full error message\n                onBlur={handleInputOnBlur}\n              />\n            </div>\n          ) : null\n        )}\n        <div>\n          <div className={s0.label}>Allow LAN</div>\n          <Switch\n            name=\"allow-lan\"\n            checked={configState['allow-lan']}\n            onChange={handleSwitchOnChange}\n          />\n        </div>\n\n        <div>\n          <div className={s0.label}>Mode</div>\n          <ToggleSwitch\n            options={optionsRule}\n            name=\"mode\"\n            value={mode}\n            onChange={handleInputOnChange}\n          />\n        </div>\n\n        <div>\n          <div className={s0.label}>Log Level</div>\n          <ToggleSwitch\n            options={optionsLogLevel}\n            name=\"log-level\"\n            value={configState['log-level']}\n            onChange={handleInputOnChange}\n          />\n        </div>\n      </div>\n\n      <div className={s0.sep}>\n        <div />\n      </div>\n\n      <div className={s0.section}>\n        <div>\n          <div className={s0.label}>Chart Style</div>\n          <Selection\n            OptionComponent={TrafficChartSample}\n            optionPropsList={propsList}\n            selectedIndex={selectedChartStyleIndex}\n            onChange={selectChartStyleIndex}\n          />\n        </div>\n        <div style={{ maxWidth: 360 }}>\n          <div className={s0.label}>Latency Test URL</div>\n          <SelfControlledInput\n            name=\"latencyTestUrl\"\n            type=\"text\"\n            value={latencyTestUrl}\n            onBlur={handleInputOnBlur}\n          />\n        </div>\n        <div>\n          <div className={s0.label}>Action</div>\n          <Button label=\"Switch backend\" onClick={openAPIConfigModal} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// @ts-expect-error ts-migrate(2339) FIXME: Property 'propTypes' does not exist on type '(prop... Remove this comment to see the full error message\nConfig.propTypes = {\n  configs: PropTypes.object,\n};\n"],"sourceRoot":""}